import { en } from 'src/texts/languages/en';
import { i18next } from './i18n';

const translate = i18next.t;

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AnyArgsToStringFn = (...args: any[]) => string;

type TextOrTextFn<T> = T extends string
  ? string | AnyArgsToStringFn
  : T extends object
    ? { [K in keyof T]: TextOrTextFn<T[K]> }
    : T;

export const texts = load();

function reload() {
  const newTexts = load() satisfies TextOrTextFn<typeof en>;
  Object.assign(texts, newTexts);
}

i18next.on('languageChanged', () => {
  reload();
});

i18next.on('loaded', () => {
  reload();
});

function load() {
  return {
    common: {
      administration: translate('common.administration'),
      administrator: translate('common.administrator'),
      apiKey: translate('common.apiKey'),
      appName: translate('common.appName'),
      builtIn: translate('common.builtIn'),
      cancel: translate('common.cancel'),
      reject: translate('common.reject'),
      chat: translate('common.chat'),
      chatUser: translate('common.chatUser'),
      confirm: translate('common.confirm'),
      copied: translate('common.copied'),
      dangerZone: translate('common.dangerZone'),
      dashboard: translate('common.dashboard'),
      userBucketBadge: translate('common.userBucketBadge'),
      disabled: translate('common.disabled'),
      documentation: translate('common.documentation'),
      documentationLabel: translate('common.documentationLabel'),
      dragAndDrop: translate('common.dragAndDrop'),
      dropZone: translate('common.dropZone'),
      dropZoneDrop: translate('common.dropZoneDrop'),
      edit: translate('common.edit'),
      duplicate: translate('common.duplicate'),
      email: translate('common.email'),
      enabled: translate('common.enabled'),
      endpoint: translate('common.endpoint'),
      errorLoading: translate('common.errorLoading'),
      indexName: translate('common.indexName'),
      error: translate('common.error'),
      generate: translate('common.generate'),
      groupName: translate('common.groupName'),
      headers: translate('common.headers'),
      loginButton: translate('common.loginButton'),
      loginFailed: translate('common.loginFailed'),
      loginText: translate('common.loginText'),
      logout: translate('common.logout'),
      clearConversations: translate('common.clearConversations'),
      monthlyTokens: translate('common.monthlyTokens'),
      monthlyUserTokens: translate('common.monthlyUserTokens'),
      name: translate('common.name'),
      description: translate('common.description'),
      no: translate('common.no'),
      page: (page: number, total: number) => translate('common.page', { page, total }),
      password: translate('common.password'),
      passwordConfirm: translate('common.passwordConfirm'),
      passwordsDoNotMatch: translate('common.passwordsDoNotMatch'),
      reloadAndTryAgain: translate('common.reloadAndTryAgain'),
      remove: translate('common.remove'),
      rename: translate('common.rename'),
      required: translate('common.required'),
      reset: translate('common.reset'),
      roles: translate('common.roles'),
      rolesPlaceholder: translate('common.rolesPlaceholder'),
      save: translate('common.save'),
      saved: translate('common.saved'),
      search: translate('common.search'),
      send: translate('common.send'),
      settings: translate('common.settings'),
      hide: (thingToHide: string) => translate('common.hide', { thingToHide }),
      show: (thingToShow: string) => translate('common.show', { thingToShow }),
      conversations: translate('common.conversations'),
      menu: translate('common.menu'),
      files: translate('common.files'),
      docs: translate('common.docs'),
      docsHeader: translate('common.docsHeader'),
      subtitle: translate('common.subtitle'),
      text: translate('common.text'),
      title: translate('common.title'),
      tryAgain: translate('common.tryAgain'),
      link: translate('common.link'),
      tokens: translate('common.tokens'),
      uploadLimit: (limit: number, extensionName: string) => translate('common.uploadLimit', { limit, extensionName }),
      userGroup: translate('common.userGroup'),
      userGroups: translate('common.userGroups'),
      yes: translate('common.yes'),
      selectOption: translate('common.selectOption'),
      selectOptions: translate('common.selectOptions'),
      addItem: translate('common.addItem'),
      configurableArguments: translate('common.configurableArguments'),
      rowsSelected: (rowCount: number) => translate('common.rowsSelected', { rowCount }),
    },
    chat: {
      reasoning: translate('chat.reasoning'),
      conversationNotFound: translate('chat.conversationNotFound'),
      noAccessToConversation: translate('chat.noAccessToConversation'),
      errorLoadingMessagesOrConversation: translate('chat.errorLoadingMessagesOrConversation'),
      newChat: translate('chat.newChat'),
      welcomeText: translate('chat.welcomeText'),
      placeholder: (configuration: string) => translate('chat.placeholder', { configuration }),
      rateConversation: translate('chat.rateConversation'),
      rating: {
        incorrect: translate('chat.rating.incorrect'),
        instructions_not_followed: translate('chat.rating.instructions_not_followed'),
        insufficient_style: translate('chat.rating.insufficient_style'),
        lazy: translate('chat.rating.lazy'),
        refused: translate('chat.rating.refused'),
        other: translate('chat.rating.other'),
      },
      updateRating: {
        ratingHint: translate('chat.updateRating.ratingHint'),
        ratingSubmitted: translate('chat.updateRating.ratingSubmitted'),
        thanksForYourValuableFeedback: translate('chat.updateRating.thanksForYourValuableFeedback'),
        changeResponse: translate('chat.updateRating.changeResponse'),
        retry: translate('chat.updateRating.retry'),
        close: translate('chat.updateRating.close'),
        raitingFailed: translate('chat.updateRating.raitingFailed'),
      },
      ratingHint: translate('chat.ratingHint'),
      removeConversationConfirmText: translate('chat.removeConversationConfirmText'),
      removeConversationConfirmTitle: translate('chat.removeConversationConfirmTitle'),
      removeConversationFailed: translate('chat.removeConversationFailed'),
      renameConversationFailed: translate('chat.renameConversationFailed'),
      clearConversationsConfirmText: translate('chat.clearConversationsConfirmText'),
      clearConversationsConfirmTitle: translate('chat.clearConversationsConfirmTitle'),
      clearConversationsPerformText: translate('chat.clearConversationsPerformText'),
      clearConversationsFailed: translate('chat.clearConversationsFailed'),
      sourceAI: translate('chat.sourceAI'),
      sourceHuman: translate('chat.sourceHuman'),
      sources: {
        content: translate('chat.sources.content'),
        sources: translate('chat.sources.sources'),
        viewer: translate('chat.sources.viewer'),
        metadata: {
          metadata: translate('chat.sources.metadata.metadata'),
          fileName: translate('chat.sources.metadata.fileName'),
          sourceSystem: translate('chat.sources.metadata.sourceSystem'),
          uniquePathOrId: translate('chat.sources.metadata.uniquePathOrId'),
          pages: translate('chat.sources.metadata.pages'),
          link: translate('chat.sources.metadata.link'),
          version: translate('chat.sources.metadata.version'),
          mimeType: translate('chat.sources.metadata.mimeType'),
          fileSize: translate('chat.sources.metadata.fileSize'),
        },
      },
      speechRecognition: {
        browserNotSupported: translate('chat.speechRecognition.browserNotSupported'),
        languages: {
          de: translate('chat.speechRecognition.languages.de'),
          en: translate('chat.speechRecognition.languages.en'),
        },
        microphoneNotAvailable: translate('chat.speechRecognition.microphoneNotAvailable'),
        speechRecognitionFailed: translate('chat.speechRecognition.speechRecognitionFailed'),
        stopMicrophone: translate('chat.speechRecognition.stopMicrophone'),
        useMicrophone: translate('chat.speechRecognition.useMicrophone'),
      },
      thisMonth: translate('chat.thisMonth'),
      thisWeek: translate('chat.thisWeek'),
      today: translate('chat.today'),
      yesterday: translate('chat.yesterday'),
      filterHeadline: translate('chat.filterHeadline'),
      filterApply: translate('chat.filterApply'),
      filterResetAll: translate('chat.filterResetAll'),
      duplicateConversationSuccess: translate('chat.duplicateConversationSuccess'),
      duplicateConversationFailed: translate('chat.duplicateConversationFailed'),
      settings: {
        currentPassword: translate('chat.settings.currentPassword'),
        personalInformation: translate('chat.settings.personalInformation'),
        security: translate('chat.settings.security'),
        password: translate('chat.settings.password'),
        passwordConfirm: translate('chat.settings.passwordConfirm'),
        header: translate('chat.settings.header'),
        enterCurrentPassword: translate('chat.settings.enterCurrentPassword'),
        enterNewPassword: translate('chat.settings.enterNewPassword'),
        enterConfirmNewPassword: translate('chat.settings.enterConfirmNewPassword'),
        passwordUpdatedSuccessfully: translate('chat.settings.passwordUpdatedSuccessfully'),
        passwordUpdateFailed: translate('chat.settings.passwordUpdateFailed'),
        updatePassword: translate('chat.settings.updatePassword'),
        updatingPassword: translate('chat.settings.updatingPassword'),
      },
    },
    dashboard: {
      ratings: translate('dashboard.ratings'),
      tokensPerModelChart: translate('dashboard.tokensPerModelChart'),
      tokensTotalChat: translate('dashboard.tokensTotalChat'),
      requests: translate('dashboard.requests'),
      users: translate('dashboard.users'),
      filterInterval: {
        day: translate('dashboard.users.filterInterval.day'),
        week: translate('dashboard.users.filterInterval.week'),
        month: translate('dashboard.users.filterInterval.month'),
        total: translate('dashboard.users.filterInterval.total'),
      },
    },
    extensions: {
      add: translate('extensions.add'),
      all: translate('extensions.all'),
      configured: translate('extensions.configured'),
      createConfiguration: translate('extensions.createConfiguration'),
      createConfigurationFailed: translate('extensions.createConfigurationFailed'),
      createExtension: translate('extensions.createExtension'),
      createExtensionFailed: translate('extensions.createExtensionFailed'),
      configurationNotSelected: translate('extensions.configurationNotSelected'),
      configurations: translate('extensions.configurations'),
      configurationsEmpty: translate('extensions.configurationsEmpty'),
      duplicateConfigurationFailed: translate('extensions.duplicateConfigurationFailed'),
      executorEndpoint: translate('extensions.executorEndpoint'),
      executorEndpointHints: translate('extensions.executorEndpointHints'),
      executorHeaders: translate('extensions.executorHeaders'),
      headline: translate('extensions.headline'),
      noOthers: translate('extensions.noOthers'),
      noTools: translate('extensions.noTools'),
      removeConfigurationConfirmText: translate('extensions.removeConfigurationConfirmText'),
      removeConfigurationConfirmTitle: translate('extensions.removeConfigurationConfirmTitle'),
      removeConfigurationFailed: translate('extensions.removeConfigurationFailed'),
      removeExtensionConfirmText: translate('extensions.removeExtensionConfirmText'),
      removeExtensionConfirmTitle: translate('extensions.removeExtensionConfirmTitle'),
      removeExtensionFailed: translate('extensions.removeExtensionFailed'),
      test: translate('extensions.test'),
      testFailed: translate('extensions.testFailed'),
      testSuccess: translate('extensions.testSuccess'),
      testTooltip: translate('extensions.testTooltip'),
      typeModels: translate('extensions.typeModels'),
      typeOther: translate('extensions.typeOther'),
      typeTools: translate('extensions.typeTools'),
      updateConfiguration: translate('extensions.updateConfiguration'),
      updateConfigurationFailed: translate('extensions.updateConfigurationFailed'),
      updateExtension: translate('extensions.updateExtension'),
      updateExtensionFailed: translate('extensions.updateExtensionFailed'),
      rebuildSchemaFailed: translate('extensions.rebuildSchemaFailed'),
      rebuildSchema: translate('extensions.rebuildSchema'),
      schemaChanged: translate('extensions.schemaChanged'),
      userGroupsHints: translate('extensions.userGroupsHints'),
      warningIncompatibleFilesTools: (tool: string, otherTool: string) =>
        translate('extensions.warningIncompatibleFilesTools', { tool, otherTool }),
      warningNoModel: translate('extensions.warningNoModel'),
      warningTooManyModels: translate('extensions.warningTooManyModels'),
    },
    files: {
      bucketNotSelected: translate('files.bucketNotSelected'),
      buckets: translate('files.buckets'),
      bucketsEmpty: translate('files.bucketsEmpty'),
      createBucket: translate('files.createBucket'),
      bucketType: translate('files.bucketType'),
      createBucketFailed: translate('files.createBucketFailed'),
      deleted: translate('files.deleted'),
      deleting: translate('files.deleting'),
      deselectAll: translate('files.deselectAll'),
      fileSizeLimits: translate('files.fileSizeLimits'),
      headline: translate('files.headline'),
      headlineSearchable: translate('files.headlineSearchable'),
      isDefault: translate('files.isDefault'),
      perUserQuota: translate('files.perUserQuota'),
      allowedFileTypes: translate('files.allowedFileTypes'),
      invalidEndpointError: translate('files.invalidEndpointError'),
      properties: {
        fileName: translate('files.properties.fileName'),
        fileType: translate('files.properties.fileType'),
        fileSize: translate('files.properties.fileSize'),
        uploadedAt: translate('files.properties.uploadedAt'),
      },
      removeBucketConfirmText: translate('files.removeBucketConfirmText'),
      removeBucketConfirmTitle: translate('files.removeBucketConfirmTitle'),
      removeBucketFailed: translate('files.removeBucketFailed'),
      removeFileConfirmText: translate('files.removeFileConfirmText'),
      removeFilesConfirmText: (fileCount: number) => translate('files.removeFilesConfirmText', { fileCount }),
      removeFileConfirmTitle: translate('files.removeFileConfirmTitle'),
      removeFilesConfirmTitle: translate('files.removeFilesConfirmTitle'),
      removeFileFailed: translate('files.removeFileFailed'),
      selectAll: translate('files.selectAll'),
      testFailed: translate('files.testFailed'),
      testSuccess: translate('files.testSuccess'),
      testTooltip: translate('files.testTooltip'),
      updateBucket: translate('files.updateBucket'),
      updateBucketFailed: translate('files.updateBucketFailed'),
      uploadFailed: translate('files.uploadFailed'),
      uploadImageFailedNotYetSupported: (fileName: string) => translate('files.uploadImageFailedNotYetSupported', { fileName }),
      uploadImageFailedUseThePaperclip: (fileName: string) => translate('files.uploadImageFailedUseThePaperclip', { fileName }),
      uploading: translate('files.uploading'),
      uploadMultiple: (fileCount: number) => translate('files.uploadMultiple', { fileCount }),
      wholeFileTooLarge: translate('files.wholeFileTooLarge'),
    },
    login: {
      loginButton: (provider: string) => translate('login.loginButton', { provider }),
      loginHint: translate('login.loginHint'),
      welcome: translate('login.welcome'),
      authError: translate('login.authError'),
      emptyAuthSettings: translate('login.emptyAuthSettings'),
    },
    userGroups: {
      create: translate('userGroups.create'),
      empty: translate('userGroups.empty'),
      removeConfirmText: translate('userGroups.removeConfirmText'),
      removeConfirmTitle: translate('userGroups.removeConfirmTitle'),
      removeUserGroupFailed: translate('userGroups.removeUserGroupFailed'),
      headline: translate('userGroups.headline'),
      update: translate('userGroups.update'),
      updateFailed: translate('userGroups.updateFailed'),
    },
    users: {
      apiKeyHint: translate('users.apiKeyHint'),
      create: translate('users.create'),
      empty: translate('users.empty'),
      removeConfirmText: translate('users.removeConfirmText'),
      removeConfirmTitle: translate('users.removeConfirmTitle'),
      generateAPIKey: translate('users.generateAPIKey'),
      headline: translate('users.headline'),
      update: translate('users.update'),
      updateFailed: translate('users.updateFailed'),
      warningNotAdminWithKey: translate('users.warningNotAdminWithKey'),
    },
    theme: {
      agentName: translate('theme.agentName'),
      agentNameHints: translate('theme.agentNameHints'),
      appName: translate('theme.appName'),
      language: translate('theme.language'),
      languages: {
        de: translate('theme.languages.de'),
        en: translate('theme.languages.en'),
      },
      appNameHints: translate('theme.appNameHints'),
      customCss: translate('theme.customCss'),
      footer: translate('theme.footer'),
      footerHints: translate('theme.footerHints'),
      headline: translate('theme.headline'),
      links: translate('theme.links'),
      logo: translate('theme.logo'),
      avatarLogo: translate('theme.avatarLogo'),
      avatarLogoHint: translate('theme.avatarLogoHint'),
      backgroundLogo: translate('theme.backgroundLogo'),
      backgroundLogoHint: translate('theme.backgroundLogoHint'),
      logoCurrent: translate('theme.logoCurrent'),
      logoHint: translate('theme.logoHint'),
      logoUpdateFailed: translate('theme.logoUpdateFailed'),
      logoDeleteFailed: translate('theme.logoDeleteFailed'),
      primaryColor: translate('theme.primaryColor'),
      primaryContentColor: translate('theme.primaryContentColor'),
      settings: translate('theme.settings'),
      suggestions: translate('theme.suggestions'),
      suggestionsAdd: translate('theme.suggestionsAdd'),
      suggestionsHints: (maxSuggestions: number) => translate('theme.suggestionsHints', { maxSuggestions }),
      linksHints: translate('theme.linksHints'),
      linksAdd: translate('theme.linksAdd'),
      updateFailed: translate('theme.updateFailed'),
      welcomeText: translate('theme.welcomeText'),
      welcomeTextHints: translate('theme.welcomeTextHints'),
    },
  };
}
