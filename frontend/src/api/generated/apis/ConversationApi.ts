//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatUICallbackResultDto,
  ConversationDto,
  ConversationsDto,
  CreateConversationDto,
  MessagesDto,
  RateMessageDto,
  SendMessageDto,
  UpdateConversationDto,
} from '../models/index';
import {
    ChatUICallbackResultDtoFromJSON,
    ChatUICallbackResultDtoToJSON,
    ConversationDtoFromJSON,
    ConversationDtoToJSON,
    ConversationsDtoFromJSON,
    ConversationsDtoToJSON,
    CreateConversationDtoFromJSON,
    CreateConversationDtoToJSON,
    MessagesDtoFromJSON,
    MessagesDtoToJSON,
    RateMessageDtoFromJSON,
    RateMessageDtoToJSON,
    SendMessageDtoFromJSON,
    SendMessageDtoToJSON,
    UpdateConversationDtoFromJSON,
    UpdateConversationDtoToJSON,
} from '../models/index';

export interface ConfirmRequest {
    id: string;
    chatUICallbackResultDto: ChatUICallbackResultDto;
}

export interface DeleteConversationRequest {
    id: number;
}

export interface DuplicateConversationRequest {
    id: number;
}

export interface GetConversationRequest {
    id: number;
}

export interface GetDocumentRequest {
    id: number;
    messageId: number;
    documentUri: string;
}

export interface GetDocumentChunksRequest {
    id: number;
    messageId: number;
    documentUri: string;
}

export interface GetMessagesRequest {
    id: number;
}

export interface PatchConversationRequest {
    id: number;
    updateConversationDto: UpdateConversationDto;
}

export interface PostConversationRequest {
    createConversationDto: CreateConversationDto;
}

export interface PostMessageRequest {
    id: number;
    sendMessageDto: SendMessageDto;
}

export interface PutMessageRequest {
    id: number;
    messageId: number;
    sendMessageDto: SendMessageDto;
}

export interface RateMessageRequest {
    id: number;
    messageId: number;
    rateMessageDto: RateMessageDto;
}

/**
 * 
 */
export class ConversationApi extends runtime.BaseAPI {

    /**
     * 
     */
    async confirmRaw(requestParameters: ConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling confirm().'
            );
        }

        if (requestParameters['chatUICallbackResultDto'] == null) {
            throw new runtime.RequiredError(
                'chatUICallbackResultDto',
                'Required parameter "chatUICallbackResultDto" was null or undefined when calling confirm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/conversations/confirm/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ChatUICallbackResultDtoToJSON(requestParameters['chatUICallbackResultDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async confirm(id: string, chatUICallbackResultDto: ChatUICallbackResultDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.confirmRaw({ id: id, chatUICallbackResultDto: chatUICallbackResultDto }, initOverrides);
    }

    /**
     * Deletes the conversation.
     * 
     */
    async deleteConversationRaw(requestParameters: DeleteConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/conversations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the conversation.
     * 
     */
    async deleteConversation(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteConversationRaw({ id: id }, initOverrides);
    }

    /**
     * Deletes all conversations of a user.
     * 
     */
    async deleteConversationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/conversations`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes all conversations of a user.
     * 
     */
    async deleteConversations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteConversationsRaw(initOverrides);
    }

    /**
     * Duplicates the conversation.
     * 
     */
    async duplicateConversationRaw(requestParameters: DuplicateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling duplicateConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/conversations/{id}/duplicate`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationDtoFromJSON(jsonValue));
    }

    /**
     * Duplicates the conversation.
     * 
     */
    async duplicateConversation(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationDto> {
        const response = await this.duplicateConversationRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get the conversation by ID.
     * 
     */
    async getConversationRaw(requestParameters: GetConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/conversations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationDtoFromJSON(jsonValue));
    }

    /**
     * Get the conversation by ID.
     * 
     */
    async getConversation(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationDto> {
        const response = await this.getConversationRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of recent conversations
     * 
     */
    async getConversationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/conversations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationsDtoFromJSON(jsonValue));
    }

    /**
     * Gets the list of recent conversations
     * 
     */
    async getConversations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationsDto> {
        const response = await this.getConversationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the original document specified by the documentUri from an extension
     * 
     */
    async getDocumentRaw(requestParameters: GetDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocument().'
            );
        }

        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling getDocument().'
            );
        }

        if (requestParameters['documentUri'] == null) {
            throw new runtime.RequiredError(
                'documentUri',
                'Required parameter "documentUri" was null or undefined when calling getDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/conversations/{id}/messages/{messageId}/documents/{documentUri}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters['messageId']))).replace(`{${"documentUri"}}`, encodeURIComponent(String(requestParameters['documentUri']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the original document specified by the documentUri from an extension
     * 
     */
    async getDocument(id: number, messageId: number, documentUri: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getDocumentRaw({ id: id, messageId: messageId, documentUri: documentUri }, initOverrides);
        return await response.value();
    }

    /**
     * Get an array of document contents.
     * 
     */
    async getDocumentChunksRaw(requestParameters: GetDocumentChunksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentChunks().'
            );
        }

        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling getDocumentChunks().'
            );
        }

        if (requestParameters['documentUri'] == null) {
            throw new runtime.RequiredError(
                'documentUri',
                'Required parameter "documentUri" was null or undefined when calling getDocumentChunks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/conversations/{id}/messages/{messageId}/documents/{documentUri}/chunks`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters['messageId']))).replace(`{${"documentUri"}}`, encodeURIComponent(String(requestParameters['documentUri']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get an array of document contents.
     * 
     */
    async getDocumentChunks(id: number, messageId: number, documentUri: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getDocumentChunksRaw({ id: id, messageId: messageId, documentUri: documentUri }, initOverrides);
        return await response.value();
    }

    /**
     * Gets the messages of the current conversation.
     * 
     */
    async getMessagesRaw(requestParameters: GetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessagesDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMessages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/conversations/{id}/messages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessagesDtoFromJSON(jsonValue));
    }

    /**
     * Gets the messages of the current conversation.
     * 
     */
    async getMessages(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessagesDto> {
        const response = await this.getMessagesRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Update the conversation.
     * 
     */
    async patchConversationRaw(requestParameters: PatchConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling patchConversation().'
            );
        }

        if (requestParameters['updateConversationDto'] == null) {
            throw new runtime.RequiredError(
                'updateConversationDto',
                'Required parameter "updateConversationDto" was null or undefined when calling patchConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/conversations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateConversationDtoToJSON(requestParameters['updateConversationDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationDtoFromJSON(jsonValue));
    }

    /**
     * Update the conversation.
     * 
     */
    async patchConversation(id: number, updateConversationDto: UpdateConversationDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationDto> {
        const response = await this.patchConversationRaw({ id: id, updateConversationDto: updateConversationDto }, initOverrides);
        return await response.value();
    }

    /**
     * Starts the conversation.
     * 
     */
    async postConversationRaw(requestParameters: PostConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationDto>> {
        if (requestParameters['createConversationDto'] == null) {
            throw new runtime.RequiredError(
                'createConversationDto',
                'Required parameter "createConversationDto" was null or undefined when calling postConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/conversations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateConversationDtoToJSON(requestParameters['createConversationDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationDtoFromJSON(jsonValue));
    }

    /**
     * Starts the conversation.
     * 
     */
    async postConversation(createConversationDto: CreateConversationDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationDto> {
        const response = await this.postConversationRaw({ createConversationDto: createConversationDto }, initOverrides);
        return await response.value();
    }

    /**
     * Adds a message to the converation and handles it.
     * 
     */
    async postMessageRaw(requestParameters: PostMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postMessage().'
            );
        }

        if (requestParameters['sendMessageDto'] == null) {
            throw new runtime.RequiredError(
                'sendMessageDto',
                'Required parameter "sendMessageDto" was null or undefined when calling postMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/conversations/{id}/messages/sse`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageDtoToJSON(requestParameters['sendMessageDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a message to the converation and handles it.
     * 
     */
    async postMessage(id: number, sendMessageDto: SendMessageDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postMessageRaw({ id: id, sendMessageDto: sendMessageDto }, initOverrides);
    }

    /**
     * Updates an existing message message of the converation and handles it.
     * 
     */
    async putMessageRaw(requestParameters: PutMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putMessage().'
            );
        }

        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling putMessage().'
            );
        }

        if (requestParameters['sendMessageDto'] == null) {
            throw new runtime.RequiredError(
                'sendMessageDto',
                'Required parameter "sendMessageDto" was null or undefined when calling putMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/conversations/{id}/messages/{messageId}/sse`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters['messageId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageDtoToJSON(requestParameters['sendMessageDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an existing message message of the converation and handles it.
     * 
     */
    async putMessage(id: number, messageId: number, sendMessageDto: SendMessageDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putMessageRaw({ id: id, messageId: messageId, sendMessageDto: sendMessageDto }, initOverrides);
    }

    /**
     * Updates the rating of a message of the conversation.
     * 
     */
    async rateMessageRaw(requestParameters: RateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling rateMessage().'
            );
        }

        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling rateMessage().'
            );
        }

        if (requestParameters['rateMessageDto'] == null) {
            throw new runtime.RequiredError(
                'rateMessageDto',
                'Required parameter "rateMessageDto" was null or undefined when calling rateMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/conversations/{id}/messages/{messageId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters['messageId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RateMessageDtoToJSON(requestParameters['rateMessageDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the rating of a message of the conversation.
     * 
     */
    async rateMessage(id: number, messageId: number, rateMessageDto: RateMessageDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rateMessageRaw({ id: id, messageId: messageId, rateMessageDto: rateMessageDto }, initOverrides);
    }

}
