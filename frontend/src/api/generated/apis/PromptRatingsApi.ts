//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PromptRatingResponseDto,
} from '../models/index';
import {
    PromptRatingResponseDtoFromJSON,
    PromptRatingResponseDtoToJSON,
} from '../models/index';

export interface PromptRatingsControllerCreateRequest {
    promptId: number;
    body: object;
}

export interface PromptRatingsControllerDeleteRequest {
    promptId: number;
}

export interface PromptRatingsControllerFindByPromptRequest {
    promptId: number;
}

export interface PromptRatingsControllerFindMyRatingRequest {
    promptId: number;
}

export interface PromptRatingsControllerGetStatsRequest {
    promptId: number;
}

export interface PromptRatingsControllerUpdateRequest {
    promptId: number;
}

/**
 * 
 */
export class PromptRatingsApi extends runtime.BaseAPI {

    /**
     * Rate a prompt
     */
    async promptRatingsControllerCreateRaw(requestParameters: PromptRatingsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptRatingResponseDto>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling promptRatingsControllerCreate().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling promptRatingsControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/prompts/{promptId}/ratings`.replace(`{${"promptId"}}`, encodeURIComponent(String(requestParameters['promptId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptRatingResponseDtoFromJSON(jsonValue));
    }

    /**
     * Rate a prompt
     */
    async promptRatingsControllerCreate(promptId: number, body: object, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptRatingResponseDto> {
        const response = await this.promptRatingsControllerCreateRaw({ promptId: promptId, body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Delete user rating for a prompt
     */
    async promptRatingsControllerDeleteRaw(requestParameters: PromptRatingsControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling promptRatingsControllerDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/prompts/{promptId}/ratings`.replace(`{${"promptId"}}`, encodeURIComponent(String(requestParameters['promptId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete user rating for a prompt
     */
    async promptRatingsControllerDelete(promptId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.promptRatingsControllerDeleteRaw({ promptId: promptId }, initOverrides);
    }

    /**
     * Get all ratings for a prompt
     */
    async promptRatingsControllerFindByPromptRaw(requestParameters: PromptRatingsControllerFindByPromptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PromptRatingResponseDto>>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling promptRatingsControllerFindByPrompt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/prompts/{promptId}/ratings`.replace(`{${"promptId"}}`, encodeURIComponent(String(requestParameters['promptId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PromptRatingResponseDtoFromJSON));
    }

    /**
     * Get all ratings for a prompt
     */
    async promptRatingsControllerFindByPrompt(promptId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PromptRatingResponseDto>> {
        const response = await this.promptRatingsControllerFindByPromptRaw({ promptId: promptId }, initOverrides);
        return await response.value();
    }

    /**
     * Get current user rating for a prompt
     */
    async promptRatingsControllerFindMyRatingRaw(requestParameters: PromptRatingsControllerFindMyRatingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptRatingResponseDto>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling promptRatingsControllerFindMyRating().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/prompts/{promptId}/ratings/my`.replace(`{${"promptId"}}`, encodeURIComponent(String(requestParameters['promptId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptRatingResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get current user rating for a prompt
     */
    async promptRatingsControllerFindMyRating(promptId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptRatingResponseDto> {
        const response = await this.promptRatingsControllerFindMyRatingRaw({ promptId: promptId }, initOverrides);
        return await response.value();
    }

    /**
     * Get rating statistics for a prompt
     */
    async promptRatingsControllerGetStatsRaw(requestParameters: PromptRatingsControllerGetStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling promptRatingsControllerGetStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/prompts/{promptId}/ratings/stats`.replace(`{${"promptId"}}`, encodeURIComponent(String(requestParameters['promptId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get rating statistics for a prompt
     */
    async promptRatingsControllerGetStats(promptId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.promptRatingsControllerGetStatsRaw({ promptId: promptId }, initOverrides);
    }

    /**
     * Update user rating for a prompt
     */
    async promptRatingsControllerUpdateRaw(requestParameters: PromptRatingsControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptRatingResponseDto>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling promptRatingsControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/prompts/{promptId}/ratings`.replace(`{${"promptId"}}`, encodeURIComponent(String(requestParameters['promptId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptRatingResponseDtoFromJSON(jsonValue));
    }

    /**
     * Update user rating for a prompt
     */
    async promptRatingsControllerUpdate(promptId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptRatingResponseDto> {
        const response = await this.promptRatingsControllerUpdateRaw({ promptId: promptId }, initOverrides);
        return await response.value();
    }

}
