//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StreamThinkingEventDto
 */
export interface StreamThinkingEventDto {
    /**
     * The thinking content.
     * @type {string}
     * @memberof StreamThinkingEventDto
     */
    content: string;
    /**
     * The type of thinking content.
     * @type {string}
     * @memberof StreamThinkingEventDto
     */
    thinkingType: StreamThinkingEventDtoThinkingTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof StreamThinkingEventDto
     */
    type: StreamThinkingEventDtoTypeEnum;
}


/**
 * @export
 */
export const StreamThinkingEventDtoThinkingTypeEnum = {
    Start: 'start',
    Content: 'content',
    End: 'end'
} as const;
export type StreamThinkingEventDtoThinkingTypeEnum = typeof StreamThinkingEventDtoThinkingTypeEnum[keyof typeof StreamThinkingEventDtoThinkingTypeEnum];

/**
 * @export
 */
export const StreamThinkingEventDtoTypeEnum = {
    Thinking: 'thinking'
} as const;
export type StreamThinkingEventDtoTypeEnum = typeof StreamThinkingEventDtoTypeEnum[keyof typeof StreamThinkingEventDtoTypeEnum];


/**
 * Check if a given object implements the StreamThinkingEventDto interface.
 */
export function instanceOfStreamThinkingEventDto(value: object): value is StreamThinkingEventDto {
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('thinkingType' in value) || value['thinkingType'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function StreamThinkingEventDtoFromJSON(json: any): StreamThinkingEventDto {
    return StreamThinkingEventDtoFromJSONTyped(json, false);
}

export function StreamThinkingEventDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamThinkingEventDto {
    if (json == null) {
        return json;
    }
    return {
        
        'content': json['content'],
        'thinkingType': json['thinking_type'],
        'type': json['type'],
    };
}

export function StreamThinkingEventDtoToJSON(value?: StreamThinkingEventDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'content': value['content'],
        'thinking_type': value['thinkingType'],
        'type': value['type'],
    };
}

