//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ConversationDto
 */
export interface ConversationDto {
    /**
     * The ID of the conversation.
     * @type {number}
     * @memberof ConversationDto
     */
    id: number;
    /**
     * The name, which is usually a summary of the conversation.
     * @type {string}
     * @memberof ConversationDto
     */
    name?: string;
    /**
     * The ID of the configuration.
     * @type {number}
     * @memberof ConversationDto
     */
    configurationId: number;
    /**
     * The optional rating for the whole conversation.
     * @type {string}
     * @memberof ConversationDto
     */
    rating?: ConversationDtoRatingEnum;
    /**
     * The time of the last update.
     * @type {Date}
     * @memberof ConversationDto
     */
    updatedAt: Date;
    /**
     * The creation time.
     * @type {Date}
     * @memberof ConversationDto
     */
    createdAt: Date;
    /**
     * The context values.
     * @type {object}
     * @memberof ConversationDto
     */
    context?: object;
    /**
     * The argument values.
     * @type {object}
     * @memberof ConversationDto
     */
    extensionUserArguments?: object;
}


/**
 * @export
 */
export const ConversationDtoRatingEnum = {
    Good: 'good',
    Bad: 'bad',
    Unrated: 'unrated'
} as const;
export type ConversationDtoRatingEnum = typeof ConversationDtoRatingEnum[keyof typeof ConversationDtoRatingEnum];


/**
 * Check if a given object implements the ConversationDto interface.
 */
export function instanceOfConversationDto(value: object): value is ConversationDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('configurationId' in value) || value['configurationId'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function ConversationDtoFromJSON(json: any): ConversationDto {
    return ConversationDtoFromJSONTyped(json, false);
}

export function ConversationDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversationDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'configurationId': json['configurationId'],
        'rating': json['rating'] == null ? undefined : json['rating'],
        'updatedAt': (new Date(json['updatedAt'])),
        'createdAt': (new Date(json['createdAt'])),
        'context': json['context'] == null ? undefined : json['context'],
        'extensionUserArguments': json['extensionUserArguments'] == null ? undefined : json['extensionUserArguments'],
    };
}

export function ConversationDtoToJSON(value?: ConversationDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'configurationId': value['configurationId'],
        'rating': value['rating'],
        'updatedAt': ((value['updatedAt']).toISOString().substring(0,10)),
        'createdAt': ((value['createdAt']).toISOString().substring(0,10)),
        'context': value['context'],
        'extensionUserArguments': value['extensionUserArguments'],
    };
}

