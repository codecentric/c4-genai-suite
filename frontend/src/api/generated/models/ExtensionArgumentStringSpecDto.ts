//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ExtensionArgumentStringSpecDto
 */
export interface ExtensionArgumentStringSpecDto {
    /**
     * The type of the argument.
     * @type {string}
     * @memberof ExtensionArgumentStringSpecDto
     */
    type: ExtensionArgumentStringSpecDtoTypeEnum;
    /**
     * The label of the argument.
     * @type {string}
     * @memberof ExtensionArgumentStringSpecDto
     */
    title: string;
    /**
     * True, if required.
     * @type {string}
     * @memberof ExtensionArgumentStringSpecDto
     */
    description?: string;
    /**
     * True, if required.
     * @type {boolean}
     * @memberof ExtensionArgumentStringSpecDto
     */
    required?: boolean;
    /**
     * True to show this property in lists.
     * @type {boolean}
     * @memberof ExtensionArgumentStringSpecDto
     */
    showInList?: boolean;
    /**
     * URL to the documentation.
     * @type {string}
     * @memberof ExtensionArgumentStringSpecDto
     */
    documentationUrl?: string;
    /**
     * The editor.
     * @type {string}
     * @memberof ExtensionArgumentStringSpecDto
     */
    format?: ExtensionArgumentStringSpecDtoFormatEnum;
    /**
     * The examples.
     * @type {Array<string>}
     * @memberof ExtensionArgumentStringSpecDto
     */
    examples?: Array<string>;
    /**
     * The allowed values.
     * @type {Array<string>}
     * @memberof ExtensionArgumentStringSpecDto
     */
    _enum?: Array<string>;
    /**
     * The selected value.
     * @type {string}
     * @memberof ExtensionArgumentStringSpecDto
     */
    _default?: string;
}


/**
 * @export
 */
export const ExtensionArgumentStringSpecDtoTypeEnum = {
    String: 'string',
    Number: 'number',
    Boolean: 'boolean',
    Object: 'object',
    Array: 'array'
} as const;
export type ExtensionArgumentStringSpecDtoTypeEnum = typeof ExtensionArgumentStringSpecDtoTypeEnum[keyof typeof ExtensionArgumentStringSpecDtoTypeEnum];

/**
 * @export
 */
export const ExtensionArgumentStringSpecDtoFormatEnum = {
    Input: 'input',
    Textarea: 'textarea',
    Password: 'password',
    Select: 'select',
    Date: 'date',
    C4Ui: 'c4-ui'
} as const;
export type ExtensionArgumentStringSpecDtoFormatEnum = typeof ExtensionArgumentStringSpecDtoFormatEnum[keyof typeof ExtensionArgumentStringSpecDtoFormatEnum];


/**
 * Check if a given object implements the ExtensionArgumentStringSpecDto interface.
 */
export function instanceOfExtensionArgumentStringSpecDto(value: object): value is ExtensionArgumentStringSpecDto {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    return true;
}

export function ExtensionArgumentStringSpecDtoFromJSON(json: any): ExtensionArgumentStringSpecDto {
    return ExtensionArgumentStringSpecDtoFromJSONTyped(json, false);
}

export function ExtensionArgumentStringSpecDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtensionArgumentStringSpecDto {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'required': json['required'] == null ? undefined : json['required'],
        'showInList': json['showInList'] == null ? undefined : json['showInList'],
        'documentationUrl': json['documentationUrl'] == null ? undefined : json['documentationUrl'],
        'format': json['format'] == null ? undefined : json['format'],
        'examples': json['examples'] == null ? undefined : json['examples'],
        '_enum': json['enum'] == null ? undefined : json['enum'],
        '_default': json['default'] == null ? undefined : json['default'],
    };
}

export function ExtensionArgumentStringSpecDtoToJSON(value?: ExtensionArgumentStringSpecDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'type': value['type'],
        'title': value['title'],
        'description': value['description'],
        'required': value['required'],
        'showInList': value['showInList'],
        'documentationUrl': value['documentationUrl'],
        'format': value['format'],
        'examples': value['examples'],
        'enum': value['_enum'],
        'default': value['_default'],
    };
}

