//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChatSuggestionDto } from './ChatSuggestionDto';
import {
    ChatSuggestionDtoFromJSON,
    ChatSuggestionDtoFromJSONTyped,
    ChatSuggestionDtoToJSON,
} from './ChatSuggestionDto';

/**
 * 
 * @export
 * @interface UpsertConfigurationDto
 */
export interface UpsertConfigurationDto {
    /**
     * The name of the configuration.
     * @type {string}
     * @memberof UpsertConfigurationDto
     */
    name: string;
    /**
     * The description of the configuration.
     * @type {string}
     * @memberof UpsertConfigurationDto
     */
    description: string;
    /**
     * Indicates whether the configuration is enabled.
     * @type {boolean}
     * @memberof UpsertConfigurationDto
     */
    enabled: boolean;
    /**
     * The name of the agent.
     * @type {string}
     * @memberof UpsertConfigurationDto
     */
    agentName?: string;
    /**
     * The footer text to be shown below the chat.
     * @type {string}
     * @memberof UpsertConfigurationDto
     */
    chatFooter?: string;
    /**
     * The optional executor endpoint.
     * @type {string}
     * @memberof UpsertConfigurationDto
     */
    executorEndpoint?: string;
    /**
     * The optional executor headers.
     * @type {string}
     * @memberof UpsertConfigurationDto
     */
    executorHeaders?: string;
    /**
     * The allowed user groups.
     * @type {Array<string>}
     * @memberof UpsertConfigurationDto
     */
    userGroupIds?: Array<string>;
    /**
     * The suggestions to be shown for the chat.
     * @type {Array<ChatSuggestionDto>}
     * @memberof UpsertConfigurationDto
     */
    chatSuggestions?: Array<ChatSuggestionDto>;
}

/**
 * Check if a given object implements the UpsertConfigurationDto interface.
 */
export function instanceOfUpsertConfigurationDto(value: object): value is UpsertConfigurationDto {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('enabled' in value) || value['enabled'] === undefined) return false;
    return true;
}

export function UpsertConfigurationDtoFromJSON(json: any): UpsertConfigurationDto {
    return UpsertConfigurationDtoFromJSONTyped(json, false);
}

export function UpsertConfigurationDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpsertConfigurationDto {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'],
        'enabled': json['enabled'],
        'agentName': json['agentName'] == null ? undefined : json['agentName'],
        'chatFooter': json['chatFooter'] == null ? undefined : json['chatFooter'],
        'executorEndpoint': json['executorEndpoint'] == null ? undefined : json['executorEndpoint'],
        'executorHeaders': json['executorHeaders'] == null ? undefined : json['executorHeaders'],
        'userGroupIds': json['userGroupIds'] == null ? undefined : json['userGroupIds'],
        'chatSuggestions': json['chatSuggestions'] == null ? undefined : ((json['chatSuggestions'] as Array<any>).map(ChatSuggestionDtoFromJSON)),
    };
}

export function UpsertConfigurationDtoToJSON(value?: UpsertConfigurationDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'description': value['description'],
        'enabled': value['enabled'],
        'agentName': value['agentName'],
        'chatFooter': value['chatFooter'],
        'executorEndpoint': value['executorEndpoint'],
        'executorHeaders': value['executorHeaders'],
        'userGroupIds': value['userGroupIds'],
        'chatSuggestions': value['chatSuggestions'] == null ? undefined : ((value['chatSuggestions'] as Array<any>).map(ChatSuggestionDtoToJSON)),
    };
}

