//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FileDto
 */
export interface FileDto {
    /**
     * The ID of the file.
     * @type {number}
     * @memberof FileDto
     */
    id: number;
    /**
     * The name of the file.
     * @type {string}
     * @memberof FileDto
     */
    fileName: string;
    /**
     * The size of the file in bytes.
     * @type {number}
     * @memberof FileDto
     */
    fileSize: number;
    /**
     * The mime type.
     * @type {string}
     * @memberof FileDto
     */
    mimeType: string;
    /**
     * The time when the file has been created
     * @type {Date}
     * @memberof FileDto
     */
    uploadedAt: Date;
    /**
     * The status of the file upload to the RAG-Service
     * @type {string}
     * @memberof FileDto
     */
    uploadStatus?: FileDtoUploadStatusEnum;
}


/**
 * @export
 */
export const FileDtoUploadStatusEnum = {
    Successful: 'successful',
    InProgress: 'inProgress'
} as const;
export type FileDtoUploadStatusEnum = typeof FileDtoUploadStatusEnum[keyof typeof FileDtoUploadStatusEnum];


/**
 * Check if a given object implements the FileDto interface.
 */
export function instanceOfFileDto(value: object): value is FileDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('fileName' in value) || value['fileName'] === undefined) return false;
    if (!('fileSize' in value) || value['fileSize'] === undefined) return false;
    if (!('mimeType' in value) || value['mimeType'] === undefined) return false;
    if (!('uploadedAt' in value) || value['uploadedAt'] === undefined) return false;
    return true;
}

export function FileDtoFromJSON(json: any): FileDto {
    return FileDtoFromJSONTyped(json, false);
}

export function FileDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'fileName': json['fileName'],
        'fileSize': json['fileSize'],
        'mimeType': json['mimeType'],
        'uploadedAt': (new Date(json['uploadedAt'])),
        'uploadStatus': json['uploadStatus'] == null ? undefined : json['uploadStatus'],
    };
}

export function FileDtoToJSON(value?: FileDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'fileName': value['fileName'],
        'fileSize': value['fileSize'],
        'mimeType': value['mimeType'],
        'uploadedAt': ((value['uploadedAt']).toISOString()),
        'uploadStatus': value['uploadStatus'],
    };
}

